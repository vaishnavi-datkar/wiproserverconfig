package com.wipro.Orderms.controller;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.wipro.Orderms.entity.Order;
import com.wipro.Orderms.service.OrderService;

@RestController
@RequestMapping("/Orders")
public class OrderController {

    @Autowired
    private OrderService OrderService;

    
    @PostMapping
    public ResponseEntity<String> save(@RequestBody Order Order) {
        OrderService.save(Order);
        HttpHeaders headers = new HttpHeaders();
        headers.add("created-at", LocalDate.now().toString());

        return ResponseEntity
                .status(HttpStatus.CREATED)
                .headers(headers)
                .body("Data Saved Successfully");
    }

   
    @GetMapping("/{id}")
    public ResponseEntity<?> getOrderById(@PathVariable int id) {
        Optional<Order> Order = OrderService.findById(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("search-time", LocalDateTime.now().toString());

        if (Order.isPresent()) {
            return ResponseEntity
                    .ok()
                    .headers(headers)
                    .body(Order.get());
        } else {
            return ResponseEntity
                    .status(HttpStatus.NOT_FOUND)
                    .headers(headers)
                    .body("Order not found with id: " + id);
        }
    }

    
    @GetMapping
    public ResponseEntity<?> getAllOrders() {
        List<Order> Orders = OrderService.findAll();
        HttpHeaders headers = new HttpHeaders();
        headers.add("search-time", LocalDateTime.now().toString());

        if (Orders.isEmpty()) {
            return ResponseEntity
                    .status(HttpStatus.NOT_FOUND)
                    .headers(headers)
                    .body("No Orders found");
        } else {
            return ResponseEntity
                    .ok()
                    .headers(headers)
                    .body(Orders);
        }
    }

    
    @PutMapping("/{id}")
    public ResponseEntity<String> update(@PathVariable int id, @RequestBody Order updatedOrder) {
        Optional<Order> existing = OrderService.findById(id);

        if (existing.isPresent()) {
            updatedOrder.setId(id);
            OrderService.save(updatedOrder);
            return ResponseEntity.ok("Data Modified Successfully");
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body("Order not found with id: " + id);
        }
    }

    
    @DeleteMapping("/{id}")
    public ResponseEntity<String> deleteById(@PathVariable int id) {
        Optional<Order> existing = OrderService.findById(id);

        if (existing.isPresent()) {
            OrderService.deleteById(id);
            return ResponseEntity.ok("Data Deleted Successfully");
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body("Order not found with id: " + id);
        }
    }
}
