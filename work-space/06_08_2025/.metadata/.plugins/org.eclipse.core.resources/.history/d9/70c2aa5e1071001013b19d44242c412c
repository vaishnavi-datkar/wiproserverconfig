package com.wipro.orderms.controller;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import com.wipro.orderms.entity.Order;
import com.wipro.orderms.service.OrderService;

@RestController
@RequestMapping("/order")
public class OrderController {

    @Autowired
    private OrderService orderService;

    private RestTemplate restTemplate = new RestTemplate();

    // CREATE ORDER & CALL PAYMENT MS
    @PostMapping
    public ResponseEntity<String> save(@RequestBody Order order) {
        // 1. Set status to Initiated
        order.setStatus("I");
        orderService.save(order);

        // 2. Call Payment MS
        String paymentUrl = "http://localhost:9011/payment";
        Payment paymentReq = new Payment(order.getId(), false);

        try {
            ResponseEntity<Payment> paymentResponse =
                    restTemplate.postForEntity(paymentUrl, paymentReq, Payment.class);

            // 3. Update status based on response
            if (paymentResponse.getStatusCode() == HttpStatus.OK &&
                paymentResponse.getBody() != null &&
                paymentResponse.getBody().isPaymentStatus()) {
                order.setStatus("P"); // Paid
            } else {
                order.setStatus("C"); // Cancelled
            }
        } catch (Exception e) {
            order.setStatus("C"); // Cancelled on error
        }

        // Save updated status
        orderService.save(order);

        HttpHeaders headers = new HttpHeaders();
        headers.add("created-at", LocalDate.now().toString());

        return ResponseEntity
                .status(HttpStatus.CREATED)
                .headers(headers)
                .body("Order Created with Status: " + order.getStatus());
    }

    // GET BY ID
    @GetMapping("/{id}")
    public ResponseEntity<?> getOrderById(@PathVariable int id) {
        Optional<Order> order = orderService.findById(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("search-time", LocalDateTime.now().toString());

        return order.map(value -> ResponseEntity
                        .ok()
                        .headers(headers)
                        .body(value))
                .orElseGet(() -> ResponseEntity
                        .status(HttpStatus.NOT_FOUND)
                        .headers(headers)
                        .body("Order not found with id: " + id));
    }

    // GET ALL
    @GetMapping
    public ResponseEntity<?> getAllOrders() {
        List<Order> orders = orderService.findAll();
        HttpHeaders headers = new HttpHeaders();
        headers.add("search-time", LocalDateTime.now().toString());

        if (orders.isEmpty()) {
            return ResponseEntity
                    .status(HttpStatus.NOT_FOUND)
                    .headers(headers)
                    .body("No Orders found");
        }
        return ResponseEntity.ok().headers(headers).body(orders);
    }

    // UPDATE
    @PutMapping("/{id}")
    public ResponseEntity<String> update(@PathVariable int id, @RequestBody Order updatedOrder) {
        Optional<Order> existing = orderService.findById(id);

        if (existing.isPresent()) {
            updatedOrder.setId(id);
            orderService.save(updatedOrder);
            return ResponseEntity.ok("Data Modified Successfully");
        }
        return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body("Order not found with id: " + id);
    }

    // DELETE
    @DeleteMapping("/{id}")
    public ResponseEntity<String> deleteById(@PathVariable int id) {
        Optional<Order> existing = orderService.findById(id);

        if (existing.isPresent()) {
            orderService.deleteById(id);
            return ResponseEntity.ok("Data Deleted Successfully");
        }
        return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body("Order not found with id: " + id);
    }
}
