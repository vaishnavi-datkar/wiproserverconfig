package com.wipro.paymentms.controller;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.wipro.paymentms.entity.Payment;
import com.wipro.paymentms.service.PaymentService;

@RestController
@RequestMapping("/payments")
public class PaymentController {

    @Autowired
    private PaymentService paymentService;

    
    @PostMapping
    public ResponseEntity<String> save(@RequestBody Payment payment) {
        paymentService.save(payment);
        HttpHeaders headers = new HttpHeaders();
        headers.add("created-at", LocalDate.now().toString());

        return ResponseEntity
                .status(HttpStatus.CREATED)
                .headers(headers)
                .body("Data Saved Successfully");
    }

   
    @GetMapping("/{id}")
    public ResponseEntity<?> getPaymentById(@PathVariable int id) {
        Optional<Payment> payment = paymentService.findById(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("search-time", LocalDateTime.now().toString());

        if (payment.isPresent()) {
            return ResponseEntity
                    .ok()
                    .headers(headers)
                    .body(payment.get());
        } else {
            return ResponseEntity
                    .status(HttpStatus.NOT_FOUND)
                    .headers(headers)
                    .body("Payment not found with id: " + id);
        }
    }

    
    @GetMapping
    public ResponseEntity<?> getAllPayments() {
        List<Payment> payments = paymentService.findAll();
        HttpHeaders headers = new HttpHeaders();
        headers.add("search-time", LocalDateTime.now().toString());

        if (payments.isEmpty()) {
            return ResponseEntity
                    .status(HttpStatus.NOT_FOUND)
                    .headers(headers)
                    .body("No payments found");
        } else {
            return ResponseEntity
                    .ok()
                    .headers(headers)
                    .body(payments);
        }
    }

    
    @PutMapping("/{id}")
    public ResponseEntity<String> update(@PathVariable int id, @RequestBody Payment updatedPayment) {
        Optional<Payment> existing = paymentService.findById(id);

        if (existing.isPresent()) {
            updatedPayment.setId(id);
            paymentService.save(updatedPayment);
            return ResponseEntity.ok("Data Modified Successfully");
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body("Payment not found with id: " + id);
        }
    }

    
    @DeleteMapping("/{id}")
    public ResponseEntity<String> deleteById(@PathVariable int id) {
        Optional<Payment> existing = paymentService.findById(id);

        if (existing.isPresent()) {
            paymentService.deleteById(id);
            return ResponseEntity.ok("Data Deleted Successfully");
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body("Payment not found with id: " + id);
        }
    }
}
